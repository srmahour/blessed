import React, {Component} from "react";
import {serverSideTranslations} from 'next-i18next/serverSideTranslations';
import { withTranslation} from "next-i18next";
import Layout from "../components/Layout";
import {connect} from "react-redux";
import {compose} from "redux";
import {setAuth, setUsr} from "../store/action";
import {LOG_ERROR, LOG_INFO} from "../utils/logs";




interface  IProps {
    t(InTS : string) : string,
    bIsAuth : boolean
    quotes : object
};

interface  IState {

}

export const  getStaticProps = async ({locale}) =>{


    try{



        return{
            props:{
                ...(await serverSideTranslations(locale, ['common','Lang','privacy']))

            }
        }
    }catch (e) {
        LOG_ERROR(e);
        return{
            props:{
                ...(await serverSideTranslations(locale, ['common','Lang','privacy'])),
            }
        }
    }
};

const mapStateToProps = (state) => {
    const State = state.reducer;
    return {
        bIsAuth:State.bIsAuth,
        usr : State.usr
    }
}


const mapDispatchToProps = (dispatch) => {
    return{
        setAuth : (bool) => {dispatch(setAuth(bool))},
        setUsr : (usr) => {dispatch(setUsr(usr))}
    }
}

class PrivacyCenterPage extends Component<IProps , IState>{
    constructor(props) {
        super(props);

        this.state = {

        } ;

    }



    render()
    {

        const {t,bIsAuth,quotes} = this.props;

        return(
            // @ts-ignore
            <Layout t={t}  bIsAuth={bIsAuth} AuthRedux={{setAuth:this.props.setAuth,setUsr:this.props.setUsr}}>
                <br/>
                <div className={'container'}>
                    <div className={'content'}>
                        <br/>


                        <br/>
                    </div>
                </div>
            </Layout>
        )
    }
}

const TS = withTranslation(['common','Lang','privacy']);
const REDUX = connect(mapStateToProps,mapDispatchToProps);

export default compose(TS,REDUX)(PrivacyCenterPage);